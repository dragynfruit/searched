{% include "widgets/common_style.tera" %}
<div class="widget calculator">
    <div class="widget-content">
        <h3 class="widget-title">Calculator</h3>
        <div class="calc-container" tabindex="0" id="calculator-container">
            <div class="calc-display">
                <div class="calc-screen">
                    <div class="calc-history" id="calc-history"></div>
                    <div class="calc-io">
                        <div class="calc-input-line">
                            <input type="text" class="calc-input-field" id="calc-expression" autocomplete="off" spellcheck="false" value="{{ widget.Calculator.expression }}">
                        </div>
                        <div class="calc-output-line">
                            <span class="calc-result" id="calc-result">{{ widget.Calculator.result }}</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="calc-buttons">
                <div class="button-row">
                    <button class="calc-btn function" data-action="clear">C</button>
                    <button class="calc-btn function" data-action="backspace">⌫</button>
                    <div class="brackets-group">
                        <button class="calc-btn function half" data-action="open-bracket">(</button>
                        <button class="calc-btn function half" data-action="close-bracket">)</button>
                    </div>
                    <button class="calc-btn operator" data-action="divide">÷</button>
                </div>
                <div class="button-row">
                    <button class="calc-btn number">7</button>
                    <button class="calc-btn number">8</button>
                    <button class="calc-btn number">9</button>
                    <button class="calc-btn operator" data-action="multiply">×</button>
                </div>
                <div class="button-row">
                    <button class="calc-btn number">4</button>
                    <button class="calc-btn number">5</button>
                    <button class="calc-btn number">6</button>
                    <button class="calc-btn operator" data-action="subtract">−</button>
                </div>
                <div class="button-row">
                    <button class="calc-btn number">1</button>
                    <button class="calc-btn number">2</button>
                    <button class="calc-btn number">3</button>
                    <button class="calc-btn operator" data-action="add">+</button>
                </div>
                <div class="button-row">
                    <button class="calc-btn number">0</button>
                    <button class="calc-btn number" data-action="decimal">.</button>
                    <button class="calc-btn equals" data-action="equals">=</button>
                </div>
            </div>
            <div class="scientific-buttons">
                <div class="cursor-group">
                    <button class="calc-btn function half" data-action="move-left">←</button>
                    <button class="calc-btn function half" data-action="move-right">→</button>
                </div>
                <button class="calc-btn function" data-action="sin">sin</button>
                <button class="calc-btn function" data-action="cos">cos</button>
                <button class="calc-btn function" data-action="tan">tan</button>
                <button class="calc-btn function" data-action="sqrt">√</button>
                
                <button class="calc-btn function" data-action="power">^</button>
                <button class="calc-btn function" data-action="log">log</button>
                <button class="calc-btn function" data-action="ln">ln</button>
                <button class="calc-btn constant" data-action="pi">π</button>
                <button class="calc-btn constant" data-action="e">e</button>
            </div>
        </div>
        <div class="widget-footer">
            Powered by <a href="https://github.com/printfn/fend" target="_blank">fend</a>
        </div>
    </div>
</div>

<style>
    .calculator .calc-container {
        width: 400px;
        background: var(--bg-tertiary);
        border-radius: 8px;
        padding: 16px;
        max-width: 400px;
        margin: 0 auto;
        outline: none;
    }
    .calculator .calc-container:focus-within {
        box-shadow: 0 0 0 2px var(--accent-primary);
    }
    .calculator .calc-display {
        background: var(--bg-primary);
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
    }
    .calculator .calc-history {
        display: block !important;
        flex: 1;
        height: 100px;
        min-height: 100px;
        max-height: 100px;
        overflow-y: auto;
        margin-bottom: 8px;
        padding-bottom: 8px;
        border-bottom: 1px solid var(--border-color);
        color: var(--text-secondary);
        font-size: 0.9em;
        opacity: 0.8;
    }
    .calculator .calc-history::-webkit-scrollbar {
        width: 4px;
    }
    .calculator .calc-history::-webkit-scrollbar-track {
        background: transparent;
    }
    .calculator .calc-history::-webkit-scrollbar-thumb {
        background-color: var(--border-color);
        border-radius: 2px;
    }
    .calculator .calc-screen {
        min-height: 64px;
        display: flex;
        flex-direction: column;
        height: 180px;
        font-family: monospace;
        cursor: text;
        gap: 8px;
        justify-content: flex-end;
    }
    .calculator .calc-io {
        display: flex;
        flex-direction: column;
        gap: 8px;
        min-height: 64px;
        justify-content: flex-end;
    }
    .calculator .calc-input-line {
        display: flex;
        align-items: center;
        min-height: 24px;
    }
    .calculator .calc-output-line {
        display: flex;
        justify-content: flex-end;
        min-height: 32px;
        align-items: center;
    }
    .calculator .calc-input-field {
        width: 100%;
        background: transparent;
        border: none;
        color: var(--text-primary);
        font-size: 1.2em;
        font-family: monospace;
        outline: none;
        padding: 4px 0;
    }
    .calculator .calc-expression {
        color: var(--text-primary);
        font-size: 1.2em;
        line-height: 1.2;
        word-break: break-all;
        white-space: pre-wrap;
    }
    .calculator .calc-result {
        color: var(--accent-primary);
        font-size: 1.5em;
        font-weight: bold;
        line-height: 1.2;
    }
    .calculator .calc-buttons {
        display: grid;
        gap: 8px;
    }
    .calculator .button-row {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 8px;
    }
    .calculator .scientific-buttons {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
        margin-top: 8px;
        padding-top: 8px;
        border-top: 1px solid var(--border-color);
        grid-template-rows: auto auto;
    }
    .calculator .calc-btn {
        padding: 12px;
        border: none;
        border-radius: 8px;
        font-size: 1.1em;
        cursor: pointer;
        transition: all 0.2s;
        background: var(--bg-primary);
        color: var(--text-primary);
    }
    .calculator .calc-btn:hover {
        filter: brightness(1.1);
    }
    .calculator .calc-btn:active {
        transform: scale(0.95);
    }
    .calculator .calc-btn.number {
        background: var(--bg-secondary);
    }
    .calculator .calc-btn.operator {
        background: var(--bg-input);
        color: var(--accent-primary);
    }
    .calculator .calc-btn.function {
        background: var(--bg-input);
        color: var(--text-secondary);
    }
    .calculator .calc-btn.equals {
        background: var(--accent-primary);
        color: var(--bg-primary);
    }
    .calculator .calc-btn.constant {
        background: var(--bg-input);
        color: var(--text-secondary);
        font-style: italic;
    }
    .calculator .calc-btn.half {
        padding: 12px 6px;
        font-size: 1em;
    }
    .calculator .cursor-group,
    .calculator .brackets-group {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2px;
    }

    .calculator .calc-btn[data-action^="move-"] {
        font-size: 1.2em;
        line-height: 1;
        padding: 12px 6px;
        background: var(--bg-input);
        color: var(--accent-primary);
    }

    .calculator .calc-input,
    .calculator .calc-history-wrapper,
    .calculator .calc-history-header,
    .calculator .clear-history-btn,
    .calculator .calc-work,
    .calculator .calc-answer {
        display: none;
    }

    .calculator .calc-history div {
        padding: 4px 8px;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.2s;
    }
    
    .calculator .calc-history div:hover {
        background: var(--bg-secondary);
    }
    
    .calculator .calc-history .history-entry {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 8px;
    }
    
    .calculator .calc-history .history-expr {
        color: var(--text-secondary);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    .calculator .calc-history .history-result {
        color: var(--accent-primary);
        font-weight: bold;
        white-space: nowrap;
    }
</style>

<script type="module">
    import init, { evaluateFendWithTimeout } from "/js/fend/fend.esm.js";
    await init();
    
    class Calculator {
        constructor() {
            Object.assign(this, {
                history: [],
                lastAnswer: null,
                elements: {
                    expr: document.getElementById('calc-expression'),
                    result: document.getElementById('calc-result'),
                    history: document.getElementById('calc-history')
                }
            });
            
            this.setupListeners();
        }

        setupListeners() {
            const handlers = {
                click: e => this.handleInput(e.target),
                input: () => this.evaluate(this.elements.expr.value.trim()),
                keydown: e => {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        this.calculate();
                        return;
                    }
                    
                    const ops = {'+':'+', '-':'-', '*':'*', '/':'/', '%':'%', '^':'^'};
                    if (ops[e.key]) {
                        e.preventDefault();
                        this.insertOperator(ops[e.key], false);
                    }
                }
            };

            Object.entries(handlers).forEach(([event, handler]) => {
                const target = event === 'click' ? '.calc-btn' : '#calc-expression';
                document.querySelectorAll(target).forEach(el => 
                    el.addEventListener(event, handler));
            });

            this.elements.history.addEventListener('click', e => {
                const entry = e.target.closest('.history-entry');
                if (entry) {
                    this.insert(entry.querySelector('.history-result').textContent);
                }
            });
        }

        handleInput(button) {
            if (!button?.classList?.contains('calc-btn')) return;
            
            const action = button.dataset.action;
            if (!action) return this.insert(button.textContent);

            const actions = {
                clear: () => this.clear(true),
                backspace: () => this.backspace(),
                equals: () => this.calculate(),
                decimal: () => !this.getCurrentNumber().includes('.') && this.insert('.'),
                'open-bracket': '(',
                'close-bracket': ')',
                add: '+',
                subtract: '-',
                multiply: '*',
                divide: '/',
                percent: '%',
                power: '^',
                sqrt: 'sqrt(',
                sin: 'sin(',
                cos: 'cos(',
                tan: 'tan(',
                log: 'log(',
                ln: 'ln(',
                pi: 'pi',
                e: 'e',
                'move-left': () => this.moveCursor(-1),
                'move-right': () => this.moveCursor(1)
            };

            const handler = actions[action];
            if (typeof handler === 'function') handler();
            else if (typeof handler === 'string') {
                if (['+','-','*','/','%','^'].includes(handler)) {
                    this.insertOperator(handler, true);
                } else {
                    this.insert(handler);
                }
            }
        }

        moveCursor(direction) {
            const input = this.elements.expr;
            const newPos = input.selectionStart + direction;
            if (newPos >= 0 && newPos <= input.value.length) {
                input.selectionStart = input.selectionEnd = newPos;
                input.focus();
            }
        }

        insertOperator(op, addSpaces = true) {
            const pos = this.elements.expr.selectionStart;
            const value = this.elements.expr.value.trim();
            
            if ((pos === 0 || value === '') && this.lastAnswer) {
                this.insert(this.lastAnswer + (addSpaces ? ` ${op} ` : op));
            } else if (value) {
                this.insert(addSpaces ? ` ${op} ` : op);
            }
        }

        insert(text, start = this.elements.expr.selectionStart, end = start) {
            const input = this.elements.expr;
            input.value = input.value.slice(0, start) + text + input.value.slice(end);
            input.selectionStart = input.selectionEnd = start + text.length;
            input.focus();
            this.evaluate(input.value);
        }

        backspace() {
            const input = this.elements.expr;
            const start = input.selectionStart;
            const end = input.selectionEnd;
            
            if (start === end && start > 0) {
                const text = input.value;
                const before = text.slice(0, start);
                
                const ops = [' + ', ' - ', ' * ', ' / ', ' % ', ' ^ '];
                const funcs = ['sqrt(', 'sin(', 'cos(', 'tan(', 'log(', 'ln('];
                
                const opMatch = ops.find(op => before.endsWith(op));
                const funcMatch = funcs.find(f => before.endsWith(f));
                
                const len = opMatch?.length || (funcMatch?.length || 1);
                this.insert('', start - len, start);
            } else {
                this.insert('', start, end);
            }
        }

        getCurrentNumber() {
            const pos = this.elements.expr.selectionStart;
            return this.elements.expr.value.slice(0, pos).split(/[\s()*/+-]/).pop() || '';
        }

        clear(clearHistory = false) {
            Object.assign(this.elements.expr, {value: ''});
            this.elements.result.textContent = '';
            if (clearHistory) {
                this.history = [];
                this.lastAnswer = null;
                this.updateHistory();
            }
            this.elements.expr.focus();
        }

        async calculate() {
            const expr = this.elements.expr.value;
            if (!expr) return;

            try {
                const result = await evaluateFendWithTimeout(expr, 1000);
                if (!result.includes('Error')) {
                    const formattedResult = this.formatResult(result);
                    this.lastAnswer = formattedResult;
                    this.history.unshift({
                        expr,
                        result: formattedResult,
                        timestamp: new Date().toLocaleTimeString()
                    });
                    this.updateHistory();
                    this.clear();
                }
            } catch {
                this.elements.result.textContent = 'Error';
            }
        }

        async evaluate(expr) {
            this.elements.result.textContent = expr ? await this.getResult(expr) : '';
        }

        async getResult(expr) {
            try {
                const result = await evaluateFendWithTimeout(expr, 1000);
                return result.includes('Error') ? 'Error' : this.formatResult(result);
            } catch {
                return 'Error';
            }
        }

        formatResult(result) {
            return typeof result === 'number' 
                ? (Number.isInteger(result) ? String(result) 
                    : Number(result).toFixed(8).replace(/\.?0+$/, ''))
                : String(result);
        }

        updateHistory() {
            this.elements.history.innerHTML = this.history
                .map(({expr, result}) => `
                    <div class="history-entry" title="Click to insert result">
                        <div class="history-expr">${expr}</div>
                        <div class="history-result">${result}</div>
                    </div>`
                ).join('');
        }
    }

    new Calculator();
</script>
