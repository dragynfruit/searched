{% include "widgets/common_style.tera" %}
<div class="widget calculator">
    <div class="widget-content">
        <h3 class="widget-title">Calculator</h3>
        <div class="calc-container" tabindex="0" id="calculator-container">
            <div class="calc-display">
                <div class="calc-screen">
                    <div class="calc-history" id="calc-history"></div>
                    <div class="calc-io">
                        <div class="calc-input-line">
                            <input type="text" class="calc-input-field" id="calc-expression" autocomplete="off" spellcheck="false">
                        </div>
                        <div class="calc-output-line">
                            <span class="calc-result" id="calc-result"></span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="calc-buttons">
                <div class="button-row">
                    <button class="calc-btn function" data-action="clear">C</button>
                    <button class="calc-btn function" data-action="backspace">⌫</button>
                    <div class="brackets-group">
                        <button class="calc-btn function half" data-action="open-bracket">(</button>
                        <button class="calc-btn function half" data-action="close-bracket">)</button>
                    </div>
                    <button class="calc-btn operator" data-action="divide">÷</button>
                </div>
                <div class="button-row">
                    <button class="calc-btn number">7</button>
                    <button class="calc-btn number">8</button>
                    <button class="calc-btn number">9</button>
                    <button class="calc-btn operator" data-action="multiply">×</button>
                </div>
                <div class="button-row">
                    <button class="calc-btn number">4</button>
                    <button class="calc-btn number">5</button>
                    <button class="calc-btn number">6</button>
                    <button class="calc-btn operator" data-action="subtract">−</button>
                </div>
                <div class="button-row">
                    <button class="calc-btn number">1</button>
                    <button class="calc-btn number">2</button>
                    <button class="calc-btn number">3</button>
                    <button class="calc-btn operator" data-action="add">+</button>
                </div>
                <div class="button-row">
                    <button class="calc-btn number">0</button>
                    <button class="calc-btn number" data-action="decimal">.</button>
                    <button class="calc-btn function" data-action="percent">%</button>
                    <button class="calc-btn equals" data-action="equals">=</button>
                </div>
            </div>
            <div class="scientific-buttons">
                <button class="calc-btn function" data-action="sin">sin</button>
                <button class="calc-btn function" data-action="cos">cos</button>
                <button class="calc-btn function" data-action="tan">tan</button>
                <button class="calc-btn function" data-action="sqrt">√</button>
                <button class="calc-btn function" data-action="power">^</button>
                <button class="calc-btn function" data-action="log">log</button>
                <button class="calc-btn function" data-action="ln">ln</button>
                <button class="calc-btn constant" data-action="pi">π</button>
                <button class="calc-btn constant" data-action="e">e</button>
            </div>
        </div>
        <div class="widget-footer">
            Powered by <a href="https://github.com/printfn/fend" target="_blank">fend</a>
        </div>
    </div>
</div>

<style>
    /* Minimal combined widget styling */
    .calculator .calc-container {
        width: 400px;
        background: var(--bg-tertiary);
        border-radius: 8px;
        padding: 16px;
        max-width: 400px;
        margin: 0 auto;
        outline: none;
    }
    .calculator .calc-container:focus-within {
        box-shadow: 0 0 0 2px var(--accent-primary);
    }
    .calculator .calc-display {
        background: var(--bg-primary);
        border-radius: 8px;
        padding: 16px;
        margin-bottom: 16px;
    }
    .calculator .calc-history,
    .calculator .calc-history-header,
    .calculator .clear-history-btn {
        display: none;
    }
    .calculator .calc-history {
        color: var(--text-secondary);
        font-size: 0.9em;
        margin-bottom: 8px;
        overflow-y: auto;
        scrollbar-width: thin;
        scrollbar-color: var(--text-secondary) transparent;
    }
    .calculator .calc-history::-webkit-scrollbar {
        width: 6px;
    }
    .calculator .calc-history::-webkit-scrollbar-track {
        background: transparent;
    }
    .calculator .calc-history::-webkit-scrollbar-thumb {
        background-color: var(--text-secondary);
        border-radius: 3px;
    }
    .calculator .calc-input {
        display: none;
    }
    .calculator .calc-expression {
        color: var(--text-primary);
        font-size: 1.2em;
        min-height: 24px;
    }
    .calculator .calc-result {
        color: var(--accent-primary);
        font-size: 1.5em;
        font-weight: bold;
    }
    .calculator .calc-buttons {
        display: grid;
        gap: 8px;
    }
    .calculator .button-row {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 8px;
    }
    .calculator .scientific-buttons {
        display: grid;
        grid-template-columns: repeat(5, 1fr);
        gap: 8px;
        margin-top: 8px;
        padding-top: 8px;
        border-top: 1px solid var(--border-color);
    }
    .calculator .calc-btn {
        padding: 12px;
        border: none;
        border-radius: 8px;
        font-size: 1.1em;
        cursor: pointer;
        transition: all 0.2s;
        background: var(--bg-primary);
        color: var(--text-primary);
    }
    .calculator .calc-btn:hover {
        filter: brightness(1.1);
    }
    .calculator .calc-btn:active {
        transform: scale(0.95);
    }
    .calculator .calc-btn.number {
        background: var(--bg-secondary);
    }
    .calculator .calc-btn.operator {
        background: var(--bg-input);
        color: var(--accent-primary);
    }
    .calculator .calc-btn.function {
        background: var(--bg-input);
        color: var(--text-secondary);
    }
    .calculator .calc-btn.equals {
        background: var(--accent-primary);
        color: var(--bg-primary);
    }
    .calculator .calc-btn.constant {
        background: var(--bg-input);
        color: var (--text-secondary);
        font-style: italic;
    }
    .calculator .no-js-message {
        text-align: center;
        padding: 20px;
        color: var(--text-secondary);
        background: var(--bg-tertiary);
        border-radius: 8px;
        font-style: italic;
    }
    .calculator .calc-display.static {
        background: var(--bg-tertiary);
        border-radius: 8px;
        padding: 16px;
        text-align: center;
    }
    .calculator .calc-display.static .calc-input {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-size: 1.2em;
    }
    .calculator .calc-display.static .equals {
        color: var(--text-secondary);
    }
    .calculator .calc-display.static .calc-result {
        color: var(--accent-primary);
        font-weight: bold;
    }
    .calculator .calc-screen {
        min-height: 64px;
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
        gap: 8px;
        cursor: text;
    }
    .calculator .calc-work {
        display: flex;
        align-items: center;
        min-height: 24px;
        color: var(--text-primary);
        font-size: 1.2em;
    }
    @keyframes blink {
        50% { opacity: 0; }
    }
    .calculator .calc-answer {
        display: flex;
        justify-content: flex-end;
        font-size: 1.5em;
        font-weight: bold;
        color: var(--accent-primary);
    }
    .calculator .calc-screen {
        display: flex;
        flex-direction: column;
        height: 180px;
        font-family: monospace;
    }
    .calculator .calc-history {
        flex: 1;
        height: 100px;
        min-height: 100px;
        max-height: 100px;
        overflow-y: auto;
        margin-bottom: 8px;
        padding-bottom: 8px;
        border-bottom: 1px solid var(--border-color);
        color: var(--text-secondary);
        font-size: 0.9em;
        opacity: 0.8;
    }
    .calculator .calc-history::-webkit-scrollbar {
        width: 4px;
    }
    .calculator .calc-history::-webkit-scrollbar-track {
        background: transparent;
    }
    .calculator .calc-history::-webkit-scrollbar-thumb {
        background-color: var(--border-color);
        border-radius: 2px;
    }
    .calculator .calc-io {
        display: flex;
        flex-direction: column;
        gap: 8px;
        min-height: 64px;
        justify-content: flex-end;
    }
    .calculator .calc-input-line {
        display: flex;
        align-items: center;
        min-height: 24px;
        color: var(--text-primary);
        font-size: 1.2em;
    }
    .calculator .calc-output-line {
        display: flex;
        justify-content: flex-end;
        min-height: 32px;
        align-items: center;
    }
    .calculator .calc-expression {
        color: var(--text-primary);
        font-size: 1.2em;
        line-height: 1.2;
        word-break: break-all;
        white-space: pre-wrap;
    }
    .calculator .calc-result {
        color: var(--accent-primary);
        font-size: 1.5em;
        font-weight: bold;
        line-height: 1.2;
    }
    .calculator .calc-history div {
        margin: 4px 0;
        line-height: 1.2;
    }
    .calculator .calc-input,
    .calculator .calc-history-wrapper,
    .calculator .calc-history-header,
    .calculator .clear-history-btn,
    .calculator .calc-work,
    .calculator .calc-answer {
        display: none;
    }
    .calculator .calc-display.static .calc-line {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-size: 1.2em;
        flex-wrap: wrap;
    }
    .calculator .calc-display.static .calc-expression {
        font-family: monospace;
        word-break: break-all;
        white-space: pre-wrap;
    }
    /* Override any rules that hide the history container */
    .calculator .calc-history {
        display: block !important;
    }
    .calculator .brackets-group {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2px;
    }
    
    .calculator .calc-btn.half {
        padding: 12px 6px;
        font-size: 1em;
    }

    .calculator .calc-input-field {
        width: 100%;
        background: transparent;
        border: none;
        color: var(--text-primary);
        font-size: 1.2em;
        font-family: monospace;
        outline: none;
        padding: 4px 0;
    }
</style>

<script type="module">
    import init, { evaluateFendWithTimeout } from "/js/fend/fend.esm.js";
    await init();
    
    class Calculator {
        constructor() {
            // Decode HTML entities in the expression
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = "{{ widget.Calculator.expression }}";
            this.expression = tempDiv.textContent;
            
            tempDiv.innerHTML = "{{ widget.Calculator.result }}";
            this.result = tempDiv.textContent;
            
            this.history = [];
            this.lastOperation = null;
            
            this.expressionElement = document.getElementById('calc-expression');
            this.resultElement = document.getElementById('calc-result');
            this.historyElement = document.getElementById('calc-history');
            this.container = document.getElementById('calculator-container');
            this.input = document.querySelector('.calc-input-field');
            
            // Set initial values
            this.input.value = this.expression;
            this.resultElement.textContent = this.result;
            
            this.isFocused = false;
            this.lastClearClick = 0;
            this.debounceTimer = null;
            
            this.setupEventListeners();
            
            // Trigger initial evaluation if there's an expression
            if (this.expression) {
                this.liveEvaluate();
            }
        }

        setupEventListeners() {
            document.querySelectorAll('.calc-btn').forEach(button => {
                button.addEventListener('click', () => {
                    const action = button.dataset.action;
                    if (action) {
                        this.handleAction(action);
                    } else {
                        // Insert at cursor position
                        const pos = this.input.selectionStart;
                        const text = this.input.value;
                        this.input.value = text.slice(0, pos) + button.textContent + text.slice(pos);
                        // Move cursor after inserted text
                        this.input.selectionStart = this.input.selectionEnd = pos + button.textContent.length;
                        this.input.focus();
                        this.expression = this.input.value;
                        this.liveEvaluate();
                    }
                });
            });

            // Input field events
            this.input.addEventListener('input', () => {
                this.expression = this.input.value;
                if (this.expression.trim()) {
                    this.liveEvaluate();
                } else {
                    this.resultElement.textContent = '';
                }
            });

            this.input.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.calculate();
                }
            });

            // Remove old keypress handler since we're using the input now
        }

        // Updated keypress handler to disable space scrolling and ignore letter keys with ctrl or alt held
        handleKeypress(e) {
            // Disable space scrolling
            if (e.key === ' ') {
                e.preventDefault();
            }
            // Ignore letter keys if control or alt is held
            if ((e.ctrlKey || e.altKey) && e.key.match(/^[a-zA-Z]$/)) {
                e.preventDefault();
                return;
            }
            if (e.key === 'Backspace') {
                this.backspace();
            } else if (e.key === 'Enter' || e.key === '=') {
                e.preventDefault();
                this.calculate();
            } else if (e.key.length === 1) {
                // Append any single character key raw to the expression
                this.expression += e.key;
                this.updateDisplay();
            }
        }

        handleAction(action) {
            switch(action) {
                case 'clear':
                    if (this.expression || !this.result) {
                        this.clear();
                    } else {
                        this.clear();
                        this.history = [];
                        this.updateHistoryDisplay();
                    }
                    break;
                case 'backspace':
                    this.backspace();
                    break;
                case 'equals':
                    this.calculate();
                    break;
                case 'decimal':
                    this.appendDecimal();
                    break;
                case 'open-bracket':
                    this.appendExpression('(');
                    break;
                case 'close-bracket':
                    this.appendExpression(')');
                    break;
                case 'add':
                    this.appendOperator('+');
                    break;
                case 'subtract':
                    this.appendOperator('-');
                    break;
                case 'multiply':
                    this.appendOperator('×');
                    break;
                case 'divide':
                    this.appendOperator('÷');
                    break;
                case 'percent':
                    this.appendOperator('%');
                    break;
                case 'power':
                    this.appendOperator('^');
                    break;
                case 'sqrt':
                    this.appendFunction('sqrt');
                    break;
                case 'sin':
                    this.appendFunction('sin');
                    break;
                case 'cos':
                    this.appendFunction('cos');
                    break;
                case 'tan':
                    this.appendFunction('tan');
                    break;
                case 'log':
                    this.appendFunction('log');
                    break;
                case 'ln':
                    this.appendFunction('ln');
                    break;
                case 'pi':
                    this.appendConstant('π');
                    break;
                case 'e':
                    this.appendConstant('e');
                    break;
            }
        }

        appendNumber(number) {
            if (this.result && !this.expression) {
                this.clear();
            }
            this.expression += number;
            this.updateDisplay();
        }

        appendOperator(operator) {
            // Convert symbols for evaluation
            const evalOp = operator === '×' ? '*' : (operator === '÷' ? '/' : operator);
            
            const pos = this.input.selectionStart;
            const text = this.input.value;
            const insert = ` ${evalOp} `;
            this.input.value = text.slice(0, pos) + insert + text.slice(pos);
            this.input.selectionStart = this.input.selectionEnd = pos + insert.length;
            this.input.focus();
            this.expression = this.input.value;
            this.liveEvaluate();
        }

        appendFunction(func) {
            const pos = this.input.selectionStart;
            const text = this.input.value;
            const insert = `${func}(`;
            this.input.value = text.slice(0, pos) + insert + text.slice(pos);
            this.input.selectionStart = this.input.selectionEnd = pos + insert.length;
            this.input.focus();
            this.expression = this.input.value;
            this.liveEvaluate();
        }

        appendConstant(constant) {
            const pos = this.input.selectionStart;
            const text = this.input.value;
            this.input.value = text.slice(0, pos) + constant + text.slice(pos);
            this.input.selectionStart = this.input.selectionEnd = pos + constant.length;
            this.input.focus();
            this.expression = this.input.value;
            this.liveEvaluate();
        }

        appendDecimal() {
            const pos = this.input.selectionStart;
            const text = this.input.value;
            
            // Get the part of the number we're currently editing
            const beforeCursor = text.slice(0, pos).split(/[\s()*/+-]/).pop();
            
            // Only add decimal if there isn't one in the current number
            if (!beforeCursor || !beforeCursor.includes('.')) {
                const insert = beforeCursor ? '.' : '0.';
                this.input.value = text.slice(0, pos) + insert + text.slice(pos);
                this.input.selectionStart = this.input.selectionEnd = pos + insert.length;
                this.input.focus();
                this.expression = this.input.value;
                this.liveEvaluate();
            }
        }

        appendExpression(text) {
            const pos = this.input.selectionStart;
            const value = this.input.value;
            this.input.value = value.slice(0, pos) + text + value.slice(pos);
            this.input.selectionStart = this.input.selectionEnd = pos + text.length;
            this.input.focus();
            this.expression = this.input.value;
            this.liveEvaluate();
        }

        clear() {
            this.input.value = '';
            this.expression = '';
            this.result = '';
            this.input.focus();
            this.updateDisplay();
        }

        backspace() {
            const pos = this.input.selectionStart;
            const text = this.input.value;
            if (text.slice(pos - 3, pos) === ' * ' || text.slice(pos - 3, pos) === ' + ' || 
                text.slice(pos - 3, pos) === ' - ' || text.slice(pos - 3, pos) === ' / ' ||
                text.slice(pos - 3, pos) === ' % ' || text.slice(pos - 3, pos) === ' ^ ') {
                this.input.value = text.slice(0, pos - 3) + text.slice(pos);
                this.input.selectionStart = this.input.selectionEnd = pos - 3;
            } else {
                this.input.value = text.slice(0, pos - 1) + text.slice(pos);
                this.input.selectionStart = this.input.selectionEnd = pos - 1;
            }
            this.input.focus();
            this.expression = this.input.value;
            this.liveEvaluate();
        }

        async calculate() {
            if (!this.expression) return;
            try {
                const res = await evaluateFendWithTimeout(this.expression, 1000);
                this.addToHistory(this.expression, res);
                this.result = res.includes('Error') ? 'Error' : res;
                this.expression = '';
                this.updateDisplay();
            } catch (_) {
                this.result = 'Error';
                this.updateDisplay();
            }
        }

        formatResult(result) {
            if (typeof result === 'number') {
                return Number.isInteger(result)
                    ? result.toString()
                    : result.toFixed(8).replace(/\.?0+$/, '');
            } else {
                return result.toString();
            }
        }

        addToHistory(expr, result) {
            this.history.unshift({
                expression: expr,
                result: this.formatResult(result)
            });
            this.updateHistoryDisplay();
        }

        updateHistoryDisplay() {
            this.historyElement.innerHTML = this.history
                .map(item => `<div>${item.expression} = ${item.result}</div>`)
                .join('');
        }

        updateDisplay() {
            // Only update result now, input is handled directly
            this.resultElement.textContent = this.result;
            if(this.expression.trim() !== "") {
                this.liveEvaluate();
            }
        }
        
        async liveEvaluate() {
            if (this.debounceTimer) clearTimeout(this.debounceTimer);
            this.debounceTimer = setTimeout(async () => {
                try {
                    const res = await evaluateFendWithTimeout(this.expression, 1000);
                    this.result = res.includes('Error') ? 'Error' : this.formatResult(res);
                    this.resultElement.textContent = this.result;
                } catch (_) {
                    this.resultElement.textContent = "Error";
                }
            }, 300);
        }
    }

    new Calculator();
</script>
